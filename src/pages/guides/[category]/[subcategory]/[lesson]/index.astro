---
import { getCollection, render } from "astro:content";
import { SEO } from "astro-seo";
import { ArrowLeft } from "lucide-react";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";

import { MDXComponents } from "@/components/MDXComponents";
import LessonLayout from "@/layouts/LessonLayout/LessonLayout.astro";

import type { LessonMeta } from "@/layouts/LessonLayout";

dayjs.extend(utc);
dayjs.extend(timezone);

export async function getStaticPaths() {
  const curriculums = await getCollection("curriculums");

  const paths = curriculums.map((curriculum) => ({
    params: {
      category: curriculum.data.category,
      subcategory: curriculum.data.subcategory,
      lesson: curriculum.data.slug,
    },
  }));

  return paths;
}

const { category, subcategory, lesson: lessonSlug } = Astro.params;

async function getLesson(category, subcategory, lessonSlug) {
  // Fetch the lesson based on category, subcategory, and slug
  const allCurriculums = await getCollection("curriculums");

  const lesson = allCurriculums.find(
    (curriculum) =>
      curriculum.data.category === category &&
      curriculum.data.subcategory === subcategory &&
      curriculum.data.slug === lessonSlug,
  );

  if (!lesson) {
    return null;
  }

  return lesson;
}

// Helper to extract leading numeric prefixes from a file path
function extractNumbersFromPath(path) {
  return path
    .split("/")
    .map((part) => {
      const match = part.match(/^(\d+)-/);
      return match ? parseInt(match[1], 10) : null;
    })
    .filter((num) => num !== null);
}

// Compare two file paths based on their numeric prefixes
function comparePaths(aPath, bPath) {
  const aNumbers = extractNumbersFromPath(aPath);
  const bNumbers = extractNumbersFromPath(bPath);
  const maxLength = Math.max(aNumbers.length, bNumbers.length);
  for (let i = 0; i < maxLength; i++) {
    const aNum = aNumbers[i] || 0;
    const bNum = bNumbers[i] || 0;
    if (aNum !== bNum) {
      return aNum - bNum;
    }
  }
  return 0;
}

async function getCurriculumList() {
  const allCurriculums = await getCollection("curriculums");

  // Sort the curriculums based on numeric prefixes in their file paths
  const sortedCurriculums = allCurriculums.sort((a, b) =>
    comparePaths(a.filePath, b.filePath),
  );

  // Filter curriculums to only include the current subcategory
  const filteredCurriculums = sortedCurriculums.filter(
    (item) =>
      item.data.category === category && item.data.subcategory === subcategory,
  );

  // Categorize items based on the curriculum field
  const categorized = filteredCurriculums.reduce(
    (acc, item) => {
      const curriculum = item.data.curriculum;

      if (!acc[curriculum]) {
        acc[curriculum] = [];
      }

      acc[curriculum].push({
        id: item.id,
        title: item.data.title,
        body: item.body || "",
        filePath: item.filePath || "",
        slug: item.data.slug,
      });

      return acc;
    },
    {} as Record<string, Array<LessonMeta>>,
  );

  // Convert the categorized object into an array of objects
  const result = Object.entries(categorized).map(([curriculum, children]) => ({
    curriculum,
    category,
    subcategory,
    children,
  }));

  return result;
}

const curriculumList = await getCurriculumList();

const lesson = await getLesson(category, subcategory, lessonSlug);

if (!lesson) {
  return Astro.redirect("/404");
}

const { Content, remarkPluginFrontmatter } = await render(lesson);
const lastModified = dayjs(remarkPluginFrontmatter.lastModified)
  .tz("Asia/Jakarta")
  .format("DD MMMM YYYY");
const minutesRead = remarkPluginFrontmatter.minutesRead;

// SEO meta configuration
const meta = {
  title: `${lesson.data.title} pada ${subcategory} | belajar ${category} | Peskom Guide`,
  description: `Panduan belajar ${subcategory} dengan topik ${lesson.data.title} yang merupakan bagian dari ${category}`,
  canonical: `${Astro.url.origin}/guides/${category}/${subcategory}/${lessonSlug}`,
};
---

<LessonLayout
  curriculums={curriculumList}
  lessonSlug={lessonSlug}
  title={lesson.data.title}
>
  <SEO {...meta} />
  <div class="grid lg:grid-cols-[1fr_minmax(auto,700px)_1fr]">
    <div class="col-start-2">
      <div class="flex flex-col items-start gap-y-4 mb-10">
        <a
          href="/"
          class="flex items-center text-text-tertiary text-sm font-medium gap-x-1"
        >
          <ArrowLeft className="w-4 h-4" />
          Home
        </a>

        <h1
          class="text-text-primary text-4xl font-semibold w-full text-balance tracking-tight leading-normal"
        >
          {lesson.data.title}
        </h1>

        <p class="font-medium text-text-tertiary text-sm">
          <span class="bg-emphasis text-accent px-1.5 py-1 rounded-lg">
            Last Updated
          </span>
          : {lastModified} / {minutesRead}
        </p>
      </div>
      <div
        class="flex flex-col items-start flex-nowrap gap-y-8 text-text-secondary font-medium text-base leading-7"
      >
        <Content components={MDXComponents} />
      </div>
    </div>
  </div>
</LessonLayout>
