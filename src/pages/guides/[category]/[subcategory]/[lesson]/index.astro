---
import { getCollection, render } from "astro:content";

import { MDXComponents } from "@/components/MDXComponents";
import LessonLayout from "@/layouts/LessonLayout/LessonLayout.astro";

import type { LessonMeta } from "@/layouts/LessonLayout";

export async function getStaticPaths() {
  const curriculums = await getCollection("curriculums");

  const paths = curriculums.map((curriculum) => ({
    params: {
      category: curriculum.data.category,
      subcategory: curriculum.data.subcategory,
      lesson: curriculum.data.slug,
    },
  }));

  return paths;
}

const { category, subcategory, lesson: lessonSlug } = Astro.params;

async function getLesson(category, subcategory, lessonSlug) {
  // Fetch the lesson based on category, subcategory, and slug
  const allCurriculums = await getCollection("curriculums");

  const lesson = allCurriculums.find(
    (curriculum) =>
      curriculum.data.category === category &&
      curriculum.data.subcategory === subcategory &&
      curriculum.data.slug === lessonSlug,
  );

  if (!lesson) {
    return null;
  }

  return lesson;
}

async function getCurriculumList() {
  const allCurriculums = await getCollection("curriculums");

  // Categorize items
  const categorized = allCurriculums.reduce(
    (acc, item) => {
      // const pathSegments = item.filePath?.split("/") || [];
      const curriculum = item.data.curriculum;

      if (!acc[curriculum]) {
        acc[curriculum] = [];
      }

      acc[curriculum].push({
        id: item.id,
        title: item.data.title,
        body: item.body || "",
        filePath: item.filePath || "",
        slug: item.data.slug,
      });

      return acc;
    },
    {} as Record<string, Array<LessonMeta>>,
  );

  // Convert categorized object into an array of objects
  const result = Object.entries(categorized).map(([curriculum, children]) => ({
    curriculum,
    category,
    subcategory,
    children,
  }));

  return result;
}

const curriculumList = await getCurriculumList();

const lesson = await getLesson(category, subcategory, lessonSlug);

if (!lesson) {
  return Astro.redirect("/404");
}

const { Content } = await render(lesson);
---

<LessonLayout
  curriculums={curriculumList}
  lessonSlug={lessonSlug}
  title={lesson.data.title}
>
  <div class="grid grid-cols-[1fr_minmax(auto,700px)_1fr]">
    <div class="col-start-2">
      <div
        class="flex flex-col items-start flex-nowrap gap-y-8 text-text-secondary font-medium text-base leading-7"
      >
        <Content components={MDXComponents} />
      </div>
    </div>
  </div>
</LessonLayout>
